import React, { useState, useEffect } from 'react'
import { useLocation } from 'react-router-dom'
import { SimplePageLayout } from '../layouts'
import { SimpleTable, StatusBadge, CurrencyFormat, DateFormat } from '../components'
import { quotesAPI } from '../utils/apiClient'
import { formatText } from '../utils/textFormatting'
// import { getDebugData } from '../data/debugData'

const Quote = () => {
  const location = useLocation()
  const [quotes, setQuotes] = useState([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [filterStatus, setFilterStatus] = useState('active') // Default kepada active
  const [showHistory, setShowHistory] = useState(false) // Toggle untuk sejarah
  const [actionLoading, setActionLoading] = useState({})

  // Function to calculate days until expiry
  const calculateDaysUntilExpiry = (validUntil) => {
    if (!validUntil) return 0
    const today = new Date()
    const validDate = new Date(validUntil)
    const diffTime = validDate - today
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
    return diffDays
  }

  // Function to handle quote status change
  const handleQuoteStatusChange = async (quoteId, action) => {
    try {
      setActionLoading(prev => ({ ...prev, [quoteId]: true }))

      let response
      if (action === 'accept') {
        response = await quotesAPI.updateStatus(quoteId, 'ACCEPTED')
      } else if (action === 'reject') {
        response = await quotesAPI.updateStatus(quoteId, 'REJECTED')
      } else if (action === 'dummy') {
        response = await quotesAPI.updateStatus(quoteId, 'DUMMY')
      } else {
        response = await quotesAPI.updateStatus(quoteId, action.toUpperCase())
      }

      if (response && response.success) {
        // Determine new status based on action (use lowercase for frontend display)
        const newStatus = action === 'accept' ? 'accepted' : action === 'reject' ? 'rejected' : action.toLowerCase()
        
        // Update the quote in the local state
        setQuotes(prev => prev.map(quote =>
          quote.id === quoteId
            ? { ...quote, status: newStatus }
            : quote
        ))

        // Show success message
        alert(`Quote ${action}ed successfully!`)
      } else {
        const errorMessage = response?.message || response?.error || 'Unknown error'
        
        // Handle specific error cases
        if (response?.status === 400) {
          alert(`Invalid request: ${errorMessage}`)
        } else if (response?.status === 404) {
          alert(`Quote not found`)
        } else if (response?.status === 500) {
          alert(`Server error: ${errorMessage}`)
        } else {
          alert(`Failed to ${action} quote: ${errorMessage}`)
        }
      }
    } catch (error) {
      alert(`Error ${action}ing quote: ${error.message}`)
    } finally {
      setActionLoading(prev => ({ ...prev, [quoteId]: false }))
    }
  }

  // Function to fetch quotes
  const fetchQuotes = async () => {
    try {
      setLoading(true)

      const response = await quotesAPI.getAll()

      if (response && response.success) {
        // Transform data untuk frontend
        const transformedQuotes = response.data.quotes.map(quote => ({
          id: quote.id,
          quoteNumber: quote.quoteNumber,
          customerName: quote.customer?.name || 'N/A',
          amount: parseFloat(quote.total),
          status: quote.status.toLowerCase(),
          date: quote.date,
          validUntil: quote.validUntil,
          subject: quote.subject || 'N/A'
        }))

        setQuotes(transformedQuotes)
      } else {
        throw new Error('API response not successful')
      }
    } catch (error) {
      // Set empty array on error
      setQuotes([])
    } finally {
      setLoading(false)
    }
  }

  // Fetch quotes from API
  useEffect(() => {
    fetchQuotes()
  }, [])

  // Refresh data when location changes (e.g., after edit)
  useEffect(() => {
    // Check if we're coming back from an edit page
    if (location.state?.refresh) {
      fetchQuotes()
    }
  }, [location])

  const filteredQuotes = quotes.filter(quote => {
    const matchesSearch = quote.quoteNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
      quote.customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      quote.subject.toLowerCase().includes(searchTerm.toLowerCase())


    // Filter berdasarkan status yang dipilih
    if (filterStatus === 'all') {
      return matchesSearch
    } else if (filterStatus === 'active') {
      // Tunjukkan quote yang aktif (draft, sent) - tidak termasuk accepted dan rejected
      const isActive = quote.status.toLowerCase() === 'draft' || quote.status.toLowerCase() === 'sent'
      return matchesSearch && isActive
    } else if (filterStatus === 'accepted') {
      // Tunjukkan quote yang diterima (accepted)
      const isAccepted = quote.status.toLowerCase() === 'accepted'
      return matchesSearch && isAccepted
    } else if (filterStatus === 'rejected') {
      // Tunjukkan quote yang ditolak (rejected)
      const isRejected = quote.status.toLowerCase() === 'rejected'
      return matchesSearch && isRejected
    } else if (filterStatus === 'dummy') {
      // Tunjukkan quote yang dummy (dummy)
      const isDummy = quote.status.toLowerCase() === 'dummy'
      return matchesSearch && isDummy
    }

    return matchesSearch
  })

  // Debug logging untuk filtered results
  if (filterStatus === 'accepted') {
  }

  // Debug logging removed for production

  // Table columns configuration
  const columns = [
    {
      key: 'quoteNumber',
      header: 'Quote No.',
      render: (value) => <span className="font-medium text-gray-900">{value}</span>
    },
    {
      key: 'customerName',
      header: 'Customer',
      render: (value) => (
        <span
          className="text-sm text-gray-900"
          title={value} // Show full name on hover
        >
          {/* {formatText(value, 20)} */}
          {value}
        </span>
      )
    },
    {
      key: 'subject',
      header: 'Subject',
      render: (value) => (
        <span
          className="text-sm text-gray-600"
          title={value} // Show full subject on hover
        >
          {/* {formatText(value, 30)} */}
          {value}
        </span>
      )
    },
    {
      key: 'amount',
      header: 'Amount',
      render: (value) => <CurrencyFormat amount={value} />
    },
    {
      key: 'status',
      header: 'Status',
      render: (value) => <StatusBadge status={value} />
    },
    {
      key: 'date',
      header: 'Date',
      render: (value) => <DateFormat date={value} />
    },
    {
      key: 'validUntil',
      header: 'Validity',
      render: (value, row) => {
        const daysUntilExpiry = calculateDaysUntilExpiry(value)
        if (['all','dummy', 'accepted', 'rejected'].includes(row.status)) return null;
        if (daysUntilExpiry > 0) {
          return (
            <span className="text-blue-600 font-medium">
              {daysUntilExpiry} days
            </span>
          )
        } else if (daysUntilExpiry === 0) {
          return (
            <span className="text-orange-600 font-medium">
              Last day
            </span>
          )
        } else {
          return (
            <span className="text-red-600 font-medium">
              Expired
            </span>
          )
        }
      }
    },
    {
      key: 'actions',
      header: 'Quick Actions',
      render: (value, row) => (
        <div className="flex items-center space-x-2">
          {/* Action buttons - Only show for draft and sent quotes */}
          {(row.status === 'draft' || row.status === 'sent') && (
            <>
              {/* Accept Button */}
              <button
                onClick={() => handleQuoteStatusChange(row.id, 'accept')}
                disabled={actionLoading[row.id]}
                className="px-3 py-1 text-xs font-medium text-white bg-green-600 rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {actionLoading[row.id] ? 'Processing...' : 'Accept'}
              </button>

              {/* Dummy Button */}
              <button
                onClick={() => handleQuoteStatusChange(row.id, 'dummy')}
                disabled={actionLoading[row.id]}
                className="px-3 py-1 text-xs font-medium text-white bg-yellow-600 rounded-md hover:bg-yellow-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {actionLoading[row.id] ? 'Processing...' : 'Dummy'}
              </button>

              {/* Reject Button */}
              <button
                onClick={() => handleQuoteStatusChange(row.id, 'reject')}
                disabled={actionLoading[row.id]}
                className="px-3 py-1 text-xs font-medium text-white bg-red-600 rounded-md hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                {actionLoading[row.id] ? 'Processing...' : 'Reject'}
              </button>
            </>
          )}

          {/* Status indicator for quotes that cannot be changed */}
          {/* {(row.status === 'accepted' || row.status === 'rejected') && (
            <span className={`px-2 py-1 text-xs font-medium rounded-full ${row.status === 'accepted'
                ? 'bg-green-100 text-green-800'
                : row.status === 'rejected'
                  ? 'bg-red-100 text-red-800'
                  : 'bg-gray-100 text-gray-800'
              }`}>
              {row.status.charAt(0).toUpperCase() + row.status.slice(1)}
            </span>
          )} */}
        </div>
      )
    }
  ]




  return (
    <SimplePageLayout
      title="QUOTE MANAGEMENT"
      newButtonText="+ CREATE NEW QUOTE"
      onNewClick={() => window.location.href = '/quotes/new'}
      buttonColor="green"
      filterOptions={["ALL", "ACTIVE", "DUMMY", "ACCEPTED", "REJECTED"]}
      activeFilter={filterStatus === 'all' ? 'ALL' : filterStatus === 'active' ? 'ACTIVE' : filterStatus === 'accepted' ? 'ACCEPTED' : 'REJECTED'}
      onFilterChange={(filter) => {
        if (filter === 'ALL') setFilterStatus('all')
        else if (filter === 'ACTIVE') setFilterStatus('active')
        else if (filter === 'DUMMY') setFilterStatus('dummy')
        else if (filter === 'ACCEPTED') setFilterStatus('accepted')
        else if (filter === 'REJECTED') setFilterStatus('rejected')
      }}
      onRefresh={fetchQuotes}
    >
      <SimpleTable
        data={filteredQuotes}
        columns={columns}
        loading={loading}
        onEdit={(row) => {
          window.location.href = `/quotes/${row.id}/edit`
        }}
        onDuplicate={(row) => {
          // TODO: Implement duplicate quote functionality
        }}
        onDelete={(row) => {
          // TODO: Implement delete quote functionality
        }}
      />
    </SimplePageLayout>
  )
}

export default Quote