import React, { useState, useEffect } from 'react'
import { SimplePageLayout, SimpleTable, StatusBadge, CurrencyFormat, DateFormat } from '../components'
import { invoicesAPI } from '../utils/apiClient'

const Invoice = () => {
  const [invoices, setInvoices] = useState([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [filterStatus, setFilterStatus] = useState('all') // Default kepada all
  const [showHistory, setShowHistory] = useState(false) // Toggle untuk sejarah

  // Function to calculate overdue days
  const calculateOverdueDays = (dueDate) => {
    if (!dueDate) return 0
    const today = new Date()
    const due = new Date(dueDate)
    const diffTime = today - due
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
    return diffDays > 0 ? diffDays : 0
  }

  // Function to get payment method icon
  const getPaymentMethodIcon = (method) => {
    const icons = {
      'Bank Transfer': 'üè¶',
      'Cash': 'üíµ',
      'Cheque': 'üìù',
      'Credit Card': 'üí≥'
    }
    return icons[method] || 'üí∞'
  }

  // Fetch invoices from API
  useEffect(() => {
    const fetchInvoices = async () => {
      try {
        setLoading(true)
        // Langsung gunakan mock data untuk demonstrasi
        throw new Error('Using mock data for demonstration')
        
        const response = await invoicesAPI.getAll()
        
        if (response && response.success) {
          // Transform data untuk frontend
          const transformedInvoices = response.data.invoices.map(invoice => ({
            id: invoice.id,
            invoiceNumber: invoice.invoiceNumber,
            customerName: invoice.customer?.name || 'N/A',
            amount: parseFloat(invoice.total),
            status: invoice.status.toLowerCase(),
            date: invoice.createdAt,
            dueDate: invoice.dueDate
          }))
          // Jika tidak ada data dari API, gunakan mock data
          if (transformedInvoices.length === 0) {
            throw new Error('No data from API')
          }
          
          setInvoices(transformedInvoices)
        } else {
          throw new Error('API response not successful')
        }
      } catch (error) {
        console.error('Error fetching invoices:', error)
        // Fallback ke mock data jika API gagal
        const mockInvoices = [
          {
            id: 1,
            invoiceNumber: 'INV-2024-001',
            customerName: 'Syarikat ABC Sdn Bhd',
            amount: 2500.00,
            status: 'paid',
            date: '2024-01-15',
            dueDate: '2024-02-15',
            paymentMethod: 'Bank Transfer'
          },
          {
            id: 2,
            invoiceNumber: 'INV-2024-002',
            customerName: 'XYZ Enterprise',
            amount: 1800.50,
            status: 'pending',
            date: '2024-01-16',
            dueDate: '2024-02-16',
            paymentMethod: 'Cash'
          },
          {
            id: 3,
            invoiceNumber: 'INV-2024-003',
            customerName: 'Tech Solutions Sdn Bhd',
            amount: 3200.75,
            status: 'overdue',
            date: '2024-01-10',
            dueDate: '2024-01-25',
            paymentMethod: 'Cheque'
          },
          {
            id: 4,
            invoiceNumber: 'INV-2024-004',
            customerName: 'Digital Corp',
            amount: 1500.00,
            status: 'pending',
            date: '2024-01-20',
            dueDate: '2024-02-20',
            paymentMethod: 'Credit Card'
          }
        ]
        setInvoices(mockInvoices)
      } finally {
        setLoading(false)
      }
    }

    fetchInvoices()
  }, [])

  const filteredInvoices = invoices.filter(invoice => {
    const matchesSearch = invoice.invoiceNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         invoice.customerName.toLowerCase().includes(searchTerm.toLowerCase())
    
    // Filter berdasarkan status yang dipilih
    if (filterStatus === 'all') {
      return matchesSearch
    } else if (filterStatus === 'active') {
      // Tunjukkan invoice yang aktif (pending, overdue)
      const isActive = invoice.status === 'pending' || invoice.status === 'overdue'
      return matchesSearch && isActive
    } else if (filterStatus === 'done') {
      // Tunjukkan invoice yang selesai (paid)
      const isDone = invoice.status === 'paid'
      return matchesSearch && isDone
    }
    
    return matchesSearch
  })

  // Debug logging (remove in production)
  console.log('Invoices:', invoices)
  console.log('Filtered invoices:', filteredInvoices)
  console.log('Show history:', showHistory)
  console.log('Filter status:', filterStatus)

  // Table columns configuration
  const columns = [
    {
      key: 'invoiceNumber',
      header: 'Invoice No.',
      render: (value) => <span className="font-medium text-gray-900">{value}</span>
    },
    {
      key: 'customerName',
      header: 'Customer'
    },
    {
      key: 'amount',
      header: 'Amount',
      render: (value) => <CurrencyFormat amount={value} />
    },
    {
      key: 'paymentMethod',
      header: 'Payment Method',
      render: (value) => (
        <div className="flex items-center">
          <span className="mr-2">{getPaymentMethodIcon(value)}</span>
          {value}
        </div>
      )
    },
    {
      key: 'status',
      header: 'Status',
      render: (value) => <StatusBadge status={value} />
    },
    {
      key: 'date',
      header: 'Date',
      render: (value) => <DateFormat date={value} />
    },
    {
      key: 'dueDate',
      header: 'Overdue',
      render: (value, row) => {
        const overdueDays = calculateOverdueDays(value)
        if (overdueDays > 0) {
          return (
            <span className="text-red-600 font-medium">
              {overdueDays} days
            </span>
          )
        } else {
          return (
            <span className="text-green-600">
              No overdue
            </span>
          )
        }
      }
    }
  ]

  // Table actions configuration
  const actions = [
    {
      label: 'View',
      className: 'text-blue-600 hover:text-blue-900',
      onClick: (row) => console.log('View invoice:', row.id)
    },
    {
      label: 'Edit',
      className: 'text-green-600 hover:text-green-900',
      onClick: (row) => window.location.href = `/invoices/${row.id}/edit`
    },
    {
      label: 'Delete',
      className: 'text-red-600 hover:text-red-900',
      onClick: (row) => console.log('Delete invoice:', row.id)
    }
  ]

  // Stats configuration
  const stats = [
    {
      label: 'Total Invoices',
      value: invoices.length,
      icon: 'üìÑ',
      bgGradient: 'bg-blue-500',
      textColor: 'text-white',
      subtitle: '+12% from last month'
    },
    {
      label: 'Paid',
      value: invoices.filter(inv => inv.status === 'paid').length,
      icon: '‚úÖ',
      bgGradient: 'bg-green-500',
      textColor: 'text-white',
      subtitle: 'Payment completed'
    },
    {
      label: 'Pending',
      value: invoices.filter(inv => inv.status === 'pending').length,
      icon: '‚è≥',
      bgGradient: 'bg-yellow-500',
      textColor: 'text-white',
      subtitle: 'Awaiting payment'
    },
    {
      label: 'Overdue',
      value: invoices.filter(inv => inv.status === 'overdue').length,
      icon: '‚ö†Ô∏è',
      bgGradient: 'bg-red-500',
      textColor: 'text-white',
      subtitle: 'Requires immediate action'
    }
  ]

  // Filter options for history mode
  const filterOptions = [
    { value: 'all', label: 'All Status' },
    { value: 'paid', label: 'Paid' },
    { value: 'pending', label: 'Pending' },
    { value: 'overdue', label: 'Overdue' }
  ]

  return (
    <SimplePageLayout
      title="INVOICE MANAGEMENT"
      newButtonText="+ CREATE NEW INVOICE"
      onNewClick={() => console.log('Create new invoice')}
      filterOptions={["ALL", "ACTIVE", "COMPLETED"]}
      activeFilter={filterStatus === 'all' ? 'ALL' : filterStatus === 'active' ? 'ACTIVE' : 'COMPLETED'}
      onFilterChange={(filter) => {
        if (filter === 'ALL') setFilterStatus('all')
        else if (filter === 'ACTIVE') setFilterStatus('active')
        else if (filter === 'COMPLETED') setFilterStatus('done')
      }}
    >
      <SimpleTable
        data={filteredInvoices}
        columns={columns}
        loading={loading}
        onEdit={(row) => console.log('Edit invoice:', row)}
        onDuplicate={(row) => console.log('Duplicate invoice:', row)}
        onDelete={(row) => console.log('Delete invoice:', row)}
      />
    </SimplePageLayout>
  )
}

export default Invoice

