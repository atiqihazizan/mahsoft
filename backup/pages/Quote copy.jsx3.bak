import React, { useState, useEffect } from 'react'
import { SimplePageLayout, SimpleTable, StatusBadge, CurrencyFormat, DateFormat } from '../components'

const Quote = () => {
  const [quotes, setQuotes] = useState([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [filterStatus, setFilterStatus] = useState('all') // Default kepada all
  const [showHistory, setShowHistory] = useState(false) // Toggle untuk sejarah

  // Function to calculate days until expiry
  const calculateDaysUntilExpiry = (validUntil) => {
    if (!validUntil) return 0
    const today = new Date()
    const validDate = new Date(validUntil)
    const diffTime = validDate - today
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
    return diffDays
  }

  // Mock data untuk demo
  useEffect(() => {
    const mockQuotes = [
      {
        id: 1,
        quoteNumber: 'QT-2024-001',
        customerName: 'Syarikat ABC Sdn Bhd',
        amount: 2500.00,
        status: 'accepted',
        date: '2024-01-15',
        validUntil: '2024-02-15'
      },
      {
        id: 2,
        quoteNumber: 'QT-2024-002',
        customerName: 'XYZ Enterprise',
        amount: 1800.50,
        status: 'pending',
        date: '2024-01-16',
        validUntil: '2024-02-16'
      },
      {
        id: 3,
        quoteNumber: 'QT-2024-003',
        customerName: 'Tech Solutions Sdn Bhd',
        amount: 3200.75,
        status: 'expired',
        date: '2024-01-10',
        validUntil: '2024-01-25'
      },
      {
        id: 4,
        quoteNumber: 'QT-2024-004',
        customerName: 'Digital Corp',
        amount: 4500.00,
        status: 'rejected',
        date: '2024-01-20',
        validUntil: '2024-02-20'
      }
    ]
    
    setTimeout(() => {
      setQuotes(mockQuotes)
      setLoading(false)
    }, 1000)
  }, [])

  const filteredQuotes = quotes.filter(quote => {
    const matchesSearch = quote.quoteNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         quote.customerName.toLowerCase().includes(searchTerm.toLowerCase())
    
    // Filter berdasarkan status yang dipilih
    if (filterStatus === 'all') {
      return matchesSearch
    } else if (filterStatus === 'active') {
      // Tunjukkan quote yang aktif (pending, expired)
      const isActive = quote.status === 'pending' || quote.status === 'expired'
      return matchesSearch && isActive
    } else if (filterStatus === 'done') {
      // Tunjukkan quote yang selesai (accepted, rejected)
      const isDone = quote.status === 'accepted' || quote.status === 'rejected'
      return matchesSearch && isDone
    }
    
    return matchesSearch
  })

  // Debug logging (remove in production)
  console.log('Quotes:', quotes)
  console.log('Filtered quotes:', filteredQuotes)
  console.log('Show history:', showHistory)
  console.log('Filter status:', filterStatus)

  // Table columns configuration
  const columns = [
    {
      key: 'quoteNumber',
      header: 'No. Sebut Harga',
      render: (value) => <span className="font-medium text-gray-900">{value}</span>
    },
    {
      key: 'customerName',
      header: 'Pelanggan'
    },
    {
      key: 'amount',
      header: 'Jumlah',
      render: (value) => <CurrencyFormat amount={value} />
    },
    {
      key: 'status',
      header: 'Status',
      render: (value) => <StatusBadge status={value} />
    },
    {
      key: 'date',
      header: 'Tarikh',
      render: (value) => <DateFormat date={value} />
    },
    {
      key: 'validUntil',
      header: 'Hari Sah',
      render: (value, row) => {
        const daysUntilExpiry = calculateDaysUntilExpiry(value)
        if (daysUntilExpiry > 0) {
          return (
            <span className="text-blue-600 font-medium">
              {daysUntilExpiry} hari
            </span>
          )
        } else if (daysUntilExpiry === 0) {
          return (
            <span className="text-orange-600 font-medium">
              Hari terakhir
            </span>
          )
        } else {
          return (
            <span className="text-red-600 font-medium">
              Tamat tempoh
            </span>
          )
        }
      }
    }
  ]

  // Table actions configuration
  const actions = [
    {
      label: 'Lihat',
      className: 'text-blue-600 hover:text-blue-900',
      onClick: (row) => console.log('View quote:', row.id)
    },
    {
      label: 'Edit',
      className: 'text-green-600 hover:text-green-900',
      onClick: (row) => window.location.href = `/quotes/${row.id}/edit`
    },
    {
      label: 'Tukar ke Invois',
      className: 'text-purple-600 hover:text-purple-900',
      onClick: (row) => console.log('Convert to invoice:', row.id)
    },
    {
      label: 'Padam',
      className: 'text-red-600 hover:text-red-900',
      onClick: (row) => console.log('Delete quote:', row.id)
    }
  ]

  // Stats configuration
  const stats = [
    {
      label: 'Total Sebut Harga',
      value: quotes.length,
      icon: 'üí∞',
      bgGradient: 'bg-green-500',
      textColor: 'text-white',
      subtitle: '+8% dari bulan lepas'
    },
    {
      label: 'Diterima',
      value: quotes.filter(q => q.status === 'accepted').length,
      icon: '‚úÖ',
      bgGradient: 'bg-blue-500',
      textColor: 'text-white',
      subtitle: 'Diterima pelanggan'
    },
    {
      label: 'Menunggu',
      value: quotes.filter(q => q.status === 'pending').length,
      icon: '‚è≥',
      bgGradient: 'bg-yellow-500',
      textColor: 'text-white',
      subtitle: 'Menunggu respons'
    },
    {
      label: 'Tamat Tempoh',
      value: quotes.filter(q => q.status === 'expired').length,
      icon: '‚ö†Ô∏è',
      bgGradient: 'bg-red-500',
      textColor: 'text-white',
      subtitle: 'Tidak sah lagi'
    }
  ]

  // Filter options for history mode
  const filterOptions = [
    { value: 'all', label: 'Semua Status' },
    { value: 'accepted', label: 'Diterima' },
    { value: 'pending', label: 'Menunggu' },
    { value: 'expired', label: 'Tamat Tempoh' },
    { value: 'rejected', label: 'Ditolak' }
  ]

  return (
    <SimplePageLayout
      title="PENGURUSAN SEBUT HARGA"
      newButtonText="+ BUAT SEBUT HARGA BARU"
      onNewClick={() => console.log('Create new quote')}
      filterOptions={["SEMUA", "AKTIF", "SELESAI"]}
      activeFilter={filterStatus === 'all' ? 'SEMUA' : filterStatus === 'active' ? 'AKTIF' : 'SELESAI'}
      onFilterChange={(filter) => {
        if (filter === 'SEMUA') setFilterStatus('all')
        else if (filter === 'AKTIF') setFilterStatus('active')
        else if (filter === 'SELESAI') setFilterStatus('done')
      }}
    >
      <SimpleTable
        data={filteredQuotes}
        columns={columns}
        onEdit={(row) => console.log('Edit quote:', row)}
        onDuplicate={(row) => console.log('Duplicate quote:', row)}
        onDelete={(row) => console.log('Delete quote:', row)}
      />
    </SimplePageLayout>
  )
}

export default Quote