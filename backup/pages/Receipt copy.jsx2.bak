import React, { useState, useEffect } from 'react'
import { SimplePageLayout, SimpleTable, StatusBadge, CurrencyFormat, DateFormat } from '../components'
import { getDebugData } from '../data/debugData'

const Receipt = () => {
  const [receipts, setReceipts] = useState([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [filterStatus, setFilterStatus] = useState('all') // Default kepada all
  const [showHistory, setShowHistory] = useState(false) // Toggle untuk sejarah


  // Load debug data untuk demo
  useEffect(() => {
    setTimeout(() => {
      setReceipts(getDebugData.receipts())
      setLoading(false)
    }, 1000)
  }, [])

  const filteredReceipts = receipts.filter(receipt => {
    const matchesSearch = receipt.receiptNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         receipt.customerName.toLowerCase().includes(searchTerm.toLowerCase())
    
    // Filter berdasarkan status yang dipilih
    if (filterStatus === 'all') {
      return matchesSearch
    } else if (filterStatus === 'active') {
      // Tunjukkan receipt yang aktif (active)
      const isActive = receipt.status === 'active'
      return matchesSearch && isActive
    } else if (filterStatus === 'done') {
      // Tunjukkan receipt yang selesai (cancelled)
      const isDone = receipt.status === 'cancelled'
      return matchesSearch && isDone
    }
    
    return matchesSearch
  })

  const getPaymentMethodIcon = (method) => {
    const icons = {
      'Bank Transfer': 'üè¶',
      'Cash': 'üíµ',
      'Cheque': 'üìù',
      'Credit Card': 'üí≥'
    }
    return icons[method] || 'üí∞'
  }

  // Debug logging (remove in production)
  console.log('Receipts:', receipts)
  console.log('Filtered receipts:', filteredReceipts)
  console.log('Show history:', showHistory)
  console.log('Filter status:', filterStatus)

  // Table columns configuration
  const columns = [
    {
      key: 'receiptNumber',
      header: 'Receipt No.',
      render: (value) => <span className="font-medium text-gray-900">{value}</span>
    },
    {
      key: 'customerName',
      header: 'Customer'
    },
    {
      key: 'amount',
      header: 'Amount',
      render: (value) => <CurrencyFormat amount={value} />
    },
    {
      key: 'paymentMethod',
      header: 'Method',
      render: (value) => (
        <div className="flex items-center">
          <span className="mr-2">{getPaymentMethodIcon(value)}</span>
          {value}
        </div>
      )
    },
    {
      key: 'status',
      header: 'Status',
      render: (value) => <StatusBadge status={value} />
    },
    {
      key: 'date',
      header: 'Date',
      render: (value) => <DateFormat date={value} />
    },
  ]

  // Table actions configuration
  const actions = [
    {
      label: 'View',
      className: 'text-blue-600 hover:text-blue-900',
      onClick: (row) => console.log('View receipt:', row.id)
    },
    {
      label: 'Edit',
      className: 'text-green-600 hover:text-green-900',
      onClick: (row) => window.location.href = `/receipts/${row.id}/edit`
    },
    {
      label: 'Print',
      className: 'text-purple-600 hover:text-purple-900',
      onClick: (row) => console.log('Print receipt:', row.id)
    },
    {
      label: 'Delete',
      className: 'text-red-600 hover:text-red-900',
      onClick: (row) => console.log('Delete receipt:', row.id)
    }
  ]

  // Stats configuration
  const stats = [
    {
      label: 'Total Receipts',
      value: receipts.length,
      icon: 'üßæ',
      bgGradient: 'bg-purple-500',
      textColor: 'text-white',
      subtitle: '+15% from last month'
    },
    {
      label: 'Active',
      value: receipts.filter(r => r.status === 'active').length,
      icon: '‚úÖ',
      bgGradient: 'bg-green-500',
      textColor: 'text-white',
      subtitle: 'Active receipts'
    },
    {
      label: 'Cancelled',
      value: receipts.filter(r => r.status === 'cancelled').length,
      icon: '‚ùå',
      bgGradient: 'bg-red-500',
      textColor: 'text-white',
      subtitle: 'Invalid'
    }
  ]

  // Filter options for history mode
  const filterOptions = [
    { value: 'all', label: 'All Status' },
    { value: 'active', label: 'Active' },
    { value: 'cancelled', label: 'Cancelled' }
  ]

  return (
    <SimplePageLayout
      title="RECEIPT MANAGEMENT"
      newButtonText="+ CREATE NEW RECEIPT"
      onNewClick={() => window.location.href = '/receipts/new'}
      buttonColor="purple"
      filterOptions={["ALL", "ACTIVE", "CANCELLED"]}
      activeFilter={filterStatus === 'all' ? 'ALL' : filterStatus === 'active' ? 'ACTIVE' : 'CANCELLED'}
      onFilterChange={(filter) => {
        if (filter === 'ALL') setFilterStatus('all')
        else if (filter === 'ACTIVE') setFilterStatus('active')
        else if (filter === 'CANCELLED') setFilterStatus('cancelled')
      }}
    >
      <SimpleTable
        data={filteredReceipts}
        columns={columns}
        loading={loading}
        onEdit={(row) => console.log('Edit receipt:', row)}
        onDuplicate={(row) => console.log('Duplicate receipt:', row)}
        onDelete={(row) => console.log('Delete receipt:', row)}
      />
    </SimplePageLayout>
  )
}

export default Receipt