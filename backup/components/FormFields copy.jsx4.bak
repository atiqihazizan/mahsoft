import React from 'react'
import { 
  parseStructuredDescription, 
  renderWhatsAppText, 
  renderSimpleText, 
  renderStructuredText,
  getFormatInstructions 
} from '../utils/textFormatting.js'

// Component untuk field pelanggan
export const CustomerField = ({ 
  value, 
  onChange, 
  customers = [], 
  error = '', 
  required = true 
}) => (
  <div>
    <label className="block text-sm font-medium text-gray-700 mb-2">
      Pelanggan {required && <span className="text-red-500">*</span>}
    </label>
    <select
      value={value}
      onChange={onChange}
      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
        error ? 'border-red-500' : 'border-gray-300'
      }`}
    >
      <option value="">Pilih pelanggan...</option>
      {customers.map(customer => (
        <option key={customer.id} value={customer.id}>
          {customer.name}
        </option>
      ))}
    </select>
    {error && (
      <p className="text-red-500 text-sm mt-1">{error}</p>
    )}
  </div>
)

// Component untuk field syarikat
export const CompanyField = ({ 
  value, 
  onChange, 
  companies = [], 
  error = '', 
  required = true 
}) => (
  <div>
    <label className="block text-sm font-medium text-gray-700 mb-2">
      Syarikat {required && <span className="text-red-500">*</span>}
    </label>
    <select
      value={value}
      onChange={onChange}
      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
        error ? 'border-red-500' : 'border-gray-300'
      }`}
    >
      <option value="">Pilih syarikat...</option>
      {companies.map(company => (
        <option key={company.id} value={company.id}>
          {company.name}
        </option>
      ))}
    </select>
    {error && (
      <p className="text-red-500 text-sm mt-1">{error}</p>
    )}
  </div>
)

// Component untuk field tarikh
export const DateField = ({ 
  value, 
  onChange, 
  label = 'Tarikh',
  error = '', 
  required = true 
}) => (
  <div>
    <label className="block text-sm font-medium text-gray-700 mb-2">
      {label} {required && <span className="text-red-500">*</span>}
    </label>
    <input
      type="date"
      value={value}
      onChange={onChange}
      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
        error ? 'border-red-500' : 'border-gray-300'
      }`}
    />
    {error && (
      <p className="text-red-500 text-sm mt-1">{error}</p>
    )}
  </div>
)

// Component untuk field kadar cukai
export const TaxRateField = ({ 
  value, 
  onChange, 
  error = '' 
}) => (
  <div>
    <label className="block text-sm font-medium text-gray-700 mb-2">
      Kadar Cukai (%)
    </label>
    <input
      type="number"
      step="0.01"
      min="0"
      max="100"
      value={value}
      onChange={onChange}
      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
        error ? 'border-red-500' : 'border-gray-300'
      }`}
    />
    {error && (
      <p className="text-red-500 text-sm mt-1">{error}</p>
    )}
  </div>
)

// Component untuk field catatan
export const NotesField = ({ 
  value, 
  onChange, 
  rows = 3,
  placeholder = 'Masukkan catatan tambahan (pilihan)...'
}) => (
  <div>
    <label className="block text-sm font-medium text-gray-700 mb-2">
      Catatan
    </label>
    <textarea
      value={value}
      onChange={onChange}
      rows={rows}
      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
      placeholder={placeholder}
    />
  </div>
)

// Component untuk field input text umum
export const TextField = ({ 
  value, 
  onChange, 
  label,
  placeholder = '',
  error = '', 
  required = false,
  type = 'text'
}) => (
  <div>
    <label className="block text-sm font-medium text-gray-700 mb-2">
      {label} {required && <span className="text-red-500">*</span>}
    </label>
    <input
      type={type}
      value={value}
      onChange={onChange}
      placeholder={placeholder}
      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
        error ? 'border-red-500' : 'border-gray-300'
      }`}
    />
    {error && (
      <p className="text-red-500 text-sm mt-1">{error}</p>
    )}
  </div>
)

// Component untuk field input number
export const NumberField = ({ 
  value, 
  onChange, 
  label,
  placeholder = '',
  error = '', 
  required = false,
  min = 0,
  max = null,
  step = '0.01'
}) => (
  <div>
    <label className="block text-sm font-medium text-gray-700 mb-2">
      {label} {required && <span className="text-red-500">*</span>}
    </label>
    <input
      type="number"
      value={value}
      onChange={onChange}
      placeholder={placeholder}
      min={min}
      max={max}
      step={step}
      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
        error ? 'border-red-500' : 'border-gray-300'
      }`}
    />
    {error && (
      <p className="text-red-500 text-sm mt-1">{error}</p>
    )}
  </div>
)

// Component untuk field select umum
export const SelectField = ({ 
  value, 
  onChange, 
  label,
  options = [],
  placeholder = 'Pilih...',
  error = '', 
  required = false
}) => (
  <div>
    <label className="block text-sm font-medium text-gray-700 mb-2">
      {label} {required && <span className="text-red-500">*</span>}
    </label>
    <select
      value={value}
      onChange={onChange}
      className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
        error ? 'border-red-500' : 'border-gray-300'
      }`}
    >
      <option value="">{placeholder}</option>
      {options.map(option => (
        <option key={option.value} value={option.value}>
          {option.label}
        </option>
      ))}
    </select>
    {error && (
      <p className="text-red-500 text-sm mt-1">{error}</p>
    )}
  </div>
)

// Component untuk field status
export const StatusField = ({ 
  value, 
  onChange, 
  type = 'invoice', // 'invoice', 'quote', 'receipt'
  error = '' 
}) => {
  const getStatusOptions = () => {
    switch (type) {
      case 'invoice':
        return [
          { value: 'DRAFT', label: 'Draf' },
          { value: 'SENT', label: 'Dihantar' },
          { value: 'PAID', label: 'Dibayar' },
          { value: 'OVERDUE', label: 'Tertunggak' },
          { value: 'CANCELLED', label: 'Dibatalkan' }
        ]
      case 'quote':
        return [
          { value: 'DRAFT', label: 'Draf' },
          { value: 'SENT', label: 'Dihantar' },
          { value: 'ACCEPTED', label: 'Diterima' },
          { value: 'REJECTED', label: 'Ditolak' },
          { value: 'EXPIRED', label: 'Tamat Tempoh' }
        ]
      case 'receipt':
        return [
          { value: 'DRAFT', label: 'Draf' },
          { value: 'PENDING', label: 'Menunggu' },
          { value: 'COMPLETED', label: 'Selesai' },
          { value: 'CANCELLED', label: 'Dibatalkan' }
        ]
      default:
        return []
    }
  }

  return (
    <SelectField
      value={value}
      onChange={onChange}
      label="Status"
      options={getStatusOptions()}
      placeholder="Pilih status..."
      error={error}
    />
  )
}

// Component untuk field kaedah pembayaran (untuk resit)
export const PaymentMethodField = ({ 
  value, 
  onChange, 
  error = '' 
}) => {
  const paymentMethods = [
    { value: 'CASH', label: 'Tunai' },
    { value: 'BANK_TRANSFER', label: 'Pemindahan Bank' },
    { value: 'CHEQUE', label: 'Cek' },
    { value: 'CREDIT_CARD', label: 'Kad Kredit' },
    { value: 'DEBIT_CARD', label: 'Kad Debit' },
    { value: 'ONLINE_PAYMENT', label: 'Pembayaran Online' }
  ]

  return (
    <SelectField
      value={value}
      onChange={onChange}
      label="Kaedah Pembayaran"
      options={paymentMethods}
      placeholder="Pilih kaedah pembayaran..."
      error={error}
    />
  )
}

// Component untuk field description dengan variant yang berbeza
export const DescriptionField = ({ 
  value, 
  onChange, 
  label = 'Penerangan',
  placeholder = 'Masukkan penerangan...',
  error = '', 
  required = false,
  variant = 'simple', // 'simple', 'structured', atau 'whatsapp'
  rows = 4
}) => {
  const [description, setDescription] = React.useState(value || '')
  const [isPreview, setIsPreview] = React.useState(false)

  // Handle input change
  const handleChange = (e) => {
    const newValue = e.target.value
    setDescription(newValue)
    onChange && onChange(e)
  }

  // Get format instructions for current variant
  const formatInstructions = getFormatInstructions(variant)

  // Render preview untuk variant structured
  const renderStructuredPreview = () => {
    return (
      <div className="border border-gray-300 rounded-md p-3 bg-gray-50 min-h-[100px]">
        {description ? (
          <div className="text-gray-700">
            {renderStructuredText(description)}
          </div>
        ) : (
          <p className="text-gray-500 italic">Tiada penerangan</p>
        )}
      </div>
    )
  }

  // Render preview untuk variant simple
  const renderSimplePreview = () => {
    return (
      <div className="border border-gray-300 rounded-md p-3 bg-gray-50 min-h-[100px]">
        {description ? (
          <div className="text-gray-700">
            {renderSimpleText(description)}
          </div>
        ) : (
          <p className="text-gray-500 italic">Tiada penerangan</p>
        )}
      </div>
    )
  }

  // Render preview untuk variant WhatsApp
  const renderWhatsAppPreview = () => {
    return (
      <div className="border border-gray-300 rounded-md p-3 bg-gray-50 min-h-[100px]">
        {description ? (
          <div className="text-gray-700">
            {renderWhatsAppText(description)}
          </div>
        ) : (
          <p className="text-gray-500 italic">Tiada penerangan</p>
        )}
      </div>
    )
  }

  return (
    <div>
      {/* <div className="mb-2"> */}
      <div className="">
        <label className="block text-sm font-medium text-gray-700">
          {label} {required && <span className="text-red-500">*</span>}
        </label>
      </div>
      
      {isPreview ? (
        variant === 'structured' ? renderStructuredPreview() : 
        variant === 'whatsapp' ? renderWhatsAppPreview() : 
        renderSimplePreview()
      ) : (
        <textarea
          value={description}
          onChange={handleChange}
          rows={rows}
          placeholder={placeholder}
          className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
            error ? 'border-red-500' : 'border-gray-300'
          }`}
        />
      )}
      
      {/* Preview button and format instructions - moved below input */}
      <div className="mt-2 flex items-top justify-between">
        <div className="flex-1">
          {variant === 'structured' && !isPreview && (
            <div className="text-xs text-gray-600">
              <p><strong>{formatInstructions.title}:</strong></p>
              <p>{formatInstructions.description}</p>
              <p>• Gunakan <code>**Tajuk**</code> untuk membuat tajuk bold</p>
              <p>• Baris selepas tajuk akan menjadi item di bawah tajuk tersebut</p>
              <p>• Baris tanpa ** akan menjadi item biasa</p>
            </div>
          )}
          
          {variant === 'whatsapp' && !isPreview && (
            <div className="text-xs text-gray-600">
              <p><strong>{formatInstructions.title}:</strong></p>
              <p>{formatInstructions.description}</p>
              <p>• <code>*text*</code> untuk <strong>bold</strong></p>
              <p>• <code>_text_</code> untuk <em>italic</em></p>
              <p>• <code>~text~</code> untuk <span className="line-through">strikethrough</span></p>
              <p>• <code>`text`</code> untuk <code className="font-mono bg-gray-100 px-1 rounded">monospace</code></p>
            </div>
          )}
        </div>
        
        <div className="ml-4">
          <button
            type="button"
            onClick={() => setIsPreview(!isPreview)}
            className="text-xs px-3 py-1 bg-blue-100 text-blue-700 rounded hover:bg-blue-200 transition-colors"
          >
            {isPreview ? 'Edit' : 'Preview'}
          </button>
        </div>
      </div>
      
      {error && (
        <p className="text-red-500 text-sm mt-1">{error}</p>
      )}
    </div>
  )
}

export default {
  CustomerField,
  CompanyField,
  DateField,
  TaxRateField,
  NotesField,
  TextField,
  NumberField,
  SelectField,
  StatusField,
  PaymentMethodField,
  DescriptionField
}
