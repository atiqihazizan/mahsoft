import React, { useState, useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'
import { SimplePageLayout, SimpleTable, StatusBadge, CurrencyFormat, DateFormat, TableCell } from '../components'
import { invoicesAPI } from '../utils/apiClient'
import { formatText } from '../utils/textFormatting'

const Invoice = () => {
  const location = useLocation()
  const navigate = useNavigate()
  const [invoices, setInvoices] = useState([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [filterStatus, setFilterStatus] = useState('active') // Default kepada active

  // Function to calculate overdue days
  const calculateOverdueDays = (dueDate) => {
    if (!dueDate) return 0
    const today = new Date()
    const due = new Date(dueDate)
    const diffTime = today - due
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
    return diffDays > 0 ? diffDays : 0
  }

  // Function to fetch invoices
  const fetchInvoices = async () => {
    try {
      setLoading(true)
      const response = await invoicesAPI.getAll()
      
      if (response?.success) {
        const transformedInvoices = response.data.invoices.map(invoice => ({
          id: invoice.id,
          invoiceNumber: invoice.invoiceNumber,
          customerName: invoice.customer?.name || 'N/A',
          subject: invoice.subject || 'N/A',
          amount: parseFloat(invoice.total),
          status: invoice.status.toLowerCase(),
          date: invoice.date,
          dueDate: invoice.dueDate
        }))
        
        if (transformedInvoices.length === 0) throw new Error('No data from API')
        setInvoices(transformedInvoices)
      } else {
        throw new Error('API response not successful')
      }
    } catch (error) {
      // Fallback ke debug data jika API gagal
      // setInvoices(getDebugData.invoices())
    } finally {
      setLoading(false)
    }
  }

  // Fetch invoices from API
  useEffect(() => {
    fetchInvoices()
  }, [])

  // Refresh data when location changes (e.g., after edit)
  useEffect(() => {
    if (location.state?.refresh) fetchInvoices()
  }, [location])

  const filteredInvoices = invoices.filter(invoice => {
    const matchesSearch = invoice.invoiceNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         invoice.customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         invoice.subject.toLowerCase().includes(searchTerm.toLowerCase())
    
    if (filterStatus === 'all') return matchesSearch
    if (filterStatus === 'active') return matchesSearch && (invoice.status === 'draft' || invoice.status === 'sent' || invoice.status === 'overdue')
    if (filterStatus === 'done') return matchesSearch && invoice.status === 'paid'
    if (filterStatus === 'cancelled') return matchesSearch && invoice.status === 'cancelled'
    return matchesSearch
  })

  // Function to determine button state based on invoice status
  const getButtonState = (row, action) => {
    const isActive = row.status === 'draft' || row.status === 'sent' || row.status === 'overdue'
    return action === 'edit' || action === 'delete' ? isActive : true
  }

  // Table columns configuration
  const columns = [
    {
      key: 'invoiceNumber',
      header: 'Invoice No.',
      render: (value) => <TableCell value={value} className="font-medium text-gray-900" />
    },
    {
      key: 'customerName',
      header: 'Customer',
      render: (value) => <TableCell value={value} className="text-sm text-gray-900" title={value} />
    },
    {
      key: 'subject',
      header: 'Subject',
      render: (value) => <TableCell value={value} className="text-sm text-gray-600" title={value} />
    },
    {
      key: 'amount',
      header: 'Amount',
      headerClassName: 'text-right',
      cellClassName: 'text-right font-bold',
      render: (value) => <CurrencyFormat amount={value} />
    },
    {
      key: 'status',
      header: 'Status',
      render: (value) => <StatusBadge status={value} />
    },
    {
      key: 'date',
      header: 'Date',
      render: (value) => <DateFormat date={value} />
    },
    {
      key: 'dueDate',
      header: 'Overdue',
      render: (value, row) => {
        if (row.status === 'paid' || row.status === 'cancelled') {
          return <TableCell value="-" className="text-gray-500" />
        }
        const overdueDays = calculateOverdueDays(value)
        return overdueDays > 0 
          ? <TableCell value={`${overdueDays} days`} className="text-red-600 font-medium" />
          : <TableCell value="No overdue" className="text-green-600" />
      }
    }
  ]
  // Table actions configuration
  return (
    <SimplePageLayout
      title="INVOICE MANAGEMENT"
      newButtonText="+ CREATE NEW INVOICE"
      onNewClick={() => navigate('/invoices/new')}
      buttonColor="blue"
      filterOptions={["ALL", "ACTIVE", "COMPLETED", "CANCELLED"]}
      activeFilter={{ 'all': 'ALL', 'active': 'ACTIVE', 'done': 'COMPLETED', 'cancelled': 'CANCELLED' }[filterStatus] || 'ACTIVE'}
      onFilterChange={(filter) => {
        const statusMap = { 'ALL': 'all', 'ACTIVE': 'active', 'COMPLETED': 'done', 'CANCELLED': 'cancelled' }
        setFilterStatus(statusMap[filter] || 'active')
      }}
      additionalActions={[
        {
          label: 'Refresh',
          onClick: fetchInvoices,
          className: 'bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md text-sm'
        }
      ]}
    >
      <SimpleTable
        data={filteredInvoices}
        columns={columns}
        loading={loading}
        getButtonState={getButtonState}
        onEdit={(row) => {
          const isActive = row.status === 'draft' || row.status === 'sent'
          isActive ? navigate(`/invoices/${row.id}/edit`) : alert('Hanya invoice yang aktif boleh diedit')
        }}
        onDuplicate={async (row) => {
          const duplicateData = { ...row }
          delete duplicateData.id
          localStorage.setItem('duplicateInvoiceData', JSON.stringify(duplicateData))
          navigate('/invoices/new?duplicate=1')
        }}
        onPreview={(row) => {
          localStorage.setItem('previewInvoiceData', JSON.stringify(row))
          navigate('/invoice-print')
        }}
        onDelete={(row) => {
          const isActive = row.status === 'draft' || row.status === 'sent' || row.status === 'overdue'
          if (isActive && confirm('Are you sure you want to delete this invoice?')) {
            console.log('Delete invoice:', row.id) // TODO: Implement delete invoice functionality
          } else if (!isActive) {
            alert('Only active invoices can be deleted')
          }
        }}
        hideActionsForStatus={['paid', 'cancelled']}
      />
    </SimplePageLayout>
  )
}

export default Invoice

